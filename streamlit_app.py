import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="Parkinson's Prediction", layout="centered")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üß† Parkinson's Disease Prediction")
st.write("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–æ–ª–æ—Å–∞, –∏ –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∂–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è.")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
file_path = "parkinsons.data"  # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
df = pd.read_csv(file_path)

# –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü "name"
df = df.drop(columns=["name"])

# –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
X = df.drop(columns=["status"])
y = df["status"]

# –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# –û–±—É—á–∞–µ–º –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é
model = LogisticRegression(max_iter=565, random_state=42)
model.fit(X_train_scaled, y_train)

# –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
y_pred = model.predict(X_test_scaled)
accuracy = accuracy_score(y_test, y_pred)

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º accuracy
st.write(f"üìä **–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏:** {accuracy:.2%}")

# –°–æ–∑–¥–∞—ë–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
st.sidebar.header("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:")

# –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
user_input = {}
for col in X.columns:
    user_input[col] = st.sidebar.slider(col, float(df[col].min()), float(df[col].max()), float(df[col].mean()))

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ DataFrame
input_data = pd.DataFrame([user_input])

# –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–≤–æ–¥
input_scaled = scaler.transform(input_data)

# –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
prediction = model.predict(input_scaled)
prediction_proba = model.predict_proba(input_scaled)

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
if prediction[0] == 1:
    st.error("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±–æ–ª–µ–∑–Ω–∏ –ü–∞—Ä–∫–∏–Ω—Å–æ–Ω–∞!")
else:
    st.success("‚úÖ –ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±–æ–ª–µ–∑–Ω–∏ –ü–∞—Ä–∫–∏–Ω—Å–æ–Ω–∞.")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–æ–≤
df_prediction_proba = pd.DataFrame(prediction_proba, columns=["Healthy", "Parkinson"])
st.dataframe(df_prediction_proba)

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")

fig = px.scatter(df, x="MDVP:Fo(Hz)", y="MDVP:Jitter(%)", color="status", title="–ì–æ–ª–æ—Å–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
st.plotly_chart(fig)

fig2 = px.histogram(df, x="PPE", color="status", nbins=30, title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ PPE (Pitch Period Entropy)")
st.plotly_chart(fig2)
